{"version":3,"sources":["Buttons/Buttons.tsx","Display/Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Buttons","props","classNameBtnIncrement","count","maxCount","classNameBtnReset","className","disabled","onClick","increment","reset","Display","classNameDisplayWrapper","App","useState","setCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAkCeA,MAzBf,SAAiBC,GAEf,IAAMC,EAAyBD,EAAME,QAAUF,EAAMG,SAAY,oBAAsB,gBACjFC,EAAqC,IAAhBJ,EAAME,MAAe,kBAAoB,YAEpE,OAEE,sBAAKG,UAAU,cAAf,UAEE,qBAAKA,UAAWJ,EAAhB,SAEKD,EAAME,QAAUF,EAAMG,SAAY,wBAAQG,UAAQ,EAAhB,iBAAgC,wBAAQC,QAASP,EAAMQ,UAAvB,mBAIvE,qBAAKH,UAAWD,EAAhB,SAEqB,IAAhBJ,EAAME,MAAe,wBAAQI,UAAQ,EAAhB,mBAAkC,wBAAQC,QAASP,EAAMS,MAAvB,yBCPnDC,MAZf,SAAiBV,GACf,IAAMW,EAA2BX,EAAME,QAAUF,EAAMG,SAAY,sBAAwB,kBAE3F,OAEE,qBAAKE,UAAWM,EAAhB,SACGX,EAAME,SCgBEU,MAtBf,WAAgB,IAAD,EACaC,mBAAiB,GAD9B,mBACNX,EADM,KACCY,EADD,KAYb,OACE,sBAAKT,UAAU,kBAAf,UAEE,cAAC,EAAD,CAASH,MAAOA,EAAOC,SAjBX,IAkBZ,cAAC,EAAD,CAASK,UAbb,WACMN,EANU,GAOZY,EAASZ,EAAQ,IAWcO,MARnC,WACEK,EAAS,IAOsCZ,MAAOA,EAAOC,SAlB/C,QCSHY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8d83de9c.chunk.js","sourcesContent":["import '../App.css';\r\n\r\ntype ButtonsPropsType = {\r\n  count: number\r\n  maxCount: number\r\n  increment: () => void\r\n  reset: () => void\r\n}\r\n\r\nfunction Buttons(props: ButtonsPropsType) {\r\n\r\n  const classNameBtnIncrement = (props.count === props.maxCount) ? \"Btn-increment-max\" : \"Btn-increment\"\r\n  const classNameBtnReset = (props.count === 0) ? \"Btn-reset-start\" : \"Btn-reset\"\r\n\r\n  return (\r\n\r\n    <div className=\"Btn-wrapper\">\r\n\r\n      <div className={classNameBtnIncrement}>\r\n        {\r\n          (props.count === props.maxCount) ? <button disabled>inc</button> : <button onClick={props.increment}>inc</button>\r\n        }\r\n      </div>\r\n\r\n      <div className={classNameBtnReset}>\r\n        {\r\n          (props.count === 0) ? <button disabled>reset</button> : <button onClick={props.reset}>reset</button>\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;","import '../App.css';\r\n\r\ntype DisplayPropsType = {\r\n  count: number\r\n  maxCount: number\r\n}\r\n\r\nfunction Display(props: DisplayPropsType) {\r\n  const classNameDisplayWrapper = (props.count === props.maxCount) ? \"Display-wrapper-max\" : \"Display-wrapper\"\r\n\r\n  return (\r\n\r\n    <div className={classNameDisplayWrapper}>\r\n      {props.count}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Buttons from './Buttons/Buttons';\nimport Display from './Display/Display';\n\nconst MAX_COUNT = 5\n\nfunction App() {\n  const [count, setCount] = useState<number>(0)\n\n  function increment() {\n    if (count < MAX_COUNT)\n      setCount(count + 1)\n  }\n\n  function reset() {\n    setCount(0)\n  }\n\n  return (\n    <div className=\"Counter-wrapper\">\n\n      <Display count={count} maxCount={MAX_COUNT} />\n      <Buttons increment={increment} reset={reset} count={count} maxCount={MAX_COUNT} />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}